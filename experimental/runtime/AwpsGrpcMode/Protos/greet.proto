syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "AwpsGrpcMode";

package awps;

service WebPubSub {
  rpc StartListening(StartListeningRequest) returns (stream Event);
  rpc ApproveConnection (ApproveConnectionMessage) returns (google.protobuf.Empty);
  rpc SendToAll (SendToAllRequest) returns (google.protobuf.Empty);
  rpc SendToGroup (SendToGroupRequest) returns (google.protobuf.Empty);
}

message StartListeningRequest {
    string hub = 1;
    string serverName = 2;
    repeated string interested_events = 3;
}
message Event{
    oneof event {
        ServiceMaintainanceEvent service_event = 1;
        ClientConnectionEvent connection_event = 2;
    }
}

message ServiceMaintainanceEvent {
    oneof message{
        RebalanceEvent rebalance = 1;
        ReloadEvent reload = 2;
        ScaleupEvent scaleup = 3;
    }
}

message RebalanceEvent{
    string target_id = 1;
}


message ReloadEvent{
}

message ScaleupEvent{

}

message ClientConnectionEvent {
    oneof message {
      ConnectEvent connect_event = 1;
      ConnectedEvent connected_event = 2;
      DisconnectedEvent disconnected_event = 3;
      UserEvent user_event = 20;
    }
}

message ConnectEvent {
    string connection_id = 1;
    RequestContext context = 2;
    repeated string sub_protocols = 3;
    repeated Certificate client_certificates = 4;

    message Certificate {
        string thumbprint = 1;
    }
}

message ConnectedEvent {
    string connection_id = 1;
    RequestContext context = 2;
}
message DisconnectedEvent {
    string connection_id = 1;
    RequestContext context = 2;
    string reason = 3;
}

message UserEvent {
    string connection_id = 1;
    int32 user_event_id = 2;
    RequestContext context = 3;
    PayloadDetail payload = 4;
}

message RequestContext {
    string connection_id = 1;
    google.protobuf.StringValue user_id = 2;
    google.protobuf.StringValue hub = 3;
    google.protobuf.StringValue state = 4;
    repeated string claim_strings = 5;
    map<string, string> claims = 6;
    map<string, string> headers = 7;
    map<string, string> query = 8;
}

message PayloadDetail {
    oneof payload {
        TextPayload text = 1;
        JsonPayload json = 2;
        BinaryPayload binary = 3;
    }
}

message TextPayload {
    oneof data {
        bytes binaryContent = 1;
        google.protobuf.StringValue stringContent = 2;
    }
}

message JsonPayload {
    oneof data {
        bytes binaryContent = 1;
        google.protobuf.StringValue stringContent = 2;
    }
}

message BinaryPayload {
    bytes data = 1;
}

message ResponseError {
    int32 code = 1;
    google.protobuf.StringValue detail = 2;
}

message ApproveConnectionMessage {
    string hub = 1;
    string connection_id = 2;

    oneof response {
        ConnectEventSuccessMessage success = 3;
        ResponseError error = 4;
    }
}

message ConnectEventSuccessMessage {
    repeated string roles = 1;
    repeated string groups = 2;
    google.protobuf.StringValue user_id = 3;
    google.protobuf.StringValue sub_protocol = 4;
    google.protobuf.StringValue state = 5;
}

message AckConnectEventResponse {
    // Empty response, preserve the class for forward compatability
}

message AckUserEventRequest {
    string connection_id = 1;
    int32 user_event_id = 2;

    oneof response {
        UserEventSuccessMessage success = 3;
        ResponseError error = 4;
    }
}

message UserEventSuccessMessage {
    oneof response {
        google.protobuf.Empty empty = 2;
        PayloadDetail payload = 3;
    }
}

message AckUserEventResponse {
    // Empty response, preserve the class for forward compatability
}

message SendToAllRequest {
   PayloadDetail payload = 1;
   repeated string excluded_connection_id = 2;
}

message SendToAllResponse{
    // Empty response, preserve the class for forward compatability
}

message SendToGroupRequest {
   string group = 1;
   PayloadDetail payload = 2;
   repeated string excluded_connection_id = 3;
}

message SendToGroupResponse{
    // Empty response, preserve the class for forward compatability
}